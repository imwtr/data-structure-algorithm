
# 斐波那契查找算法

## 时间复杂度
O(log2n)

## 空间复杂度


## 说明
在二分查找基础上以黄金分割点为理论进行改进，二分查找是1/2，斐波那契查找是动态地计算值在列表中位置部分

二分：`mid = (low + high) / 2`, 即 `mid = low + 1 / 2 * (high - low)`

黄金比例又称黄金分割，是指事物各部分间一定的数学比例关系。
即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1

斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89……
（从第三个数开始，后边每一个数都是前两个数的和 55 = 34 + 21）。`F(n)=f(n-1)+F(n-2)`
然后我们会发现，随着斐波那契数列的递增，前后两个数的比值会越来越接近0.618
有序表的元素个数不是斐波那契数列中的某个数字时，需要把有序表的元素个数长度补齐，让它成为斐波那契数列中的一个数值

有序表数组位序从0开始的，所以我们也可以直接将斐波那契数列设置为从0开始便于计算


## 实现
```javascript
function search(arr, key) {
    var max_size = 100,
        // 缓存原数组长度
        len = arr.length,
        // 低位
        left = 0,
        // 高位
        right = len - 1,
        // 判断位
        mid,
        // 生成斐波那契数列组，从0开始方便计算
        fibonacci = (function() {
            var data = [0, 1, 1];

            for (var i = 3; i < max_size; ++i) {
                data[i] = data[i - 1] + data[i - 2];
            }

            return data;
        })(),
        // 获取数组最末坐标在数列组中的位置
        basicIndex = (function() {
            var i = 0;

            while (right > fibonacci[i]) {
                i++;
            }

            return i;
        })();
    
    // 补齐数组，用于计算
    for (var i = len; i < fibonacci[basicIndex]; ++i) {
        arr[i] = arr[right];
    }

    // 循环计算
    while (left <= right) {
        mid = left + fibonacci[basicIndex - 1];

        if (arr[mid] === key) {
            // 匹配时是原数组还是在补齐位中
            return mid > len ? -1 : mid;
        }

        if (arr[mid] < key) {
            left = mid + 1;
            basicIndex -= 2;
        } else {
            right = mid - 1;
            basicIndex -= 1;
        }
    }

    return -1;
}

search([1, 2, 3, 4, 5, 6], 4);

```
